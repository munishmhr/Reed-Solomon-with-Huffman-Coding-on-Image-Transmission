function [HuffmanEncode] = huffmanencoding(runlengthSequence)
%runlengthSequence = [-3 1 3 4 1];
EOB = '1010';
% DC table
huffmanDcCoffients = {'00','010', '011', '100', '101', '110', '1110', ...
    '11110', '111110', '1111110', '11111110', '111111110'};

% DC encoding
condition = 1;
x = 1;
DcCategoryEncoding = 1;
binaryTest = '';
% Extratcing Hoffman DC cofficients
if(runlengthSequence(1)==0)
    DcCode = '00';
else
    while(condition == 1)
        if(-x <= runlengthSequence(1) && runlengthSequence(1) <= x)
            condition = 0;
        else
            x = 2*x+1;
            DcCategoryEncoding = DcCategoryEncoding + 1;
        end
    end
end
if(runlengthSequence(1) >= 1)
    binaryTest = dec2bin(runlengthSequence(1));
end

if(runlengthSequence(1) <= -1)
    binaryTest = dec2bin(-runlengthSequence(1));
    for i = 1 : 1 : length(binaryTest)
        if(str2num(binaryTest(i)) ==1)
            binaryTest(i) = '0';
        else
            binaryTest(i) = '1';
        end
        
    end
    
end
if(runlengthSequence(1) == 0)
    binaryTest = '';
    DcCategoryEncoding = 0;
end
huffmanDcCoffients(DcCategoryEncoding+1);
%%%%%%%%%%%%%%%%%%%% Dc HUffmanCode %%%%%%%%%%%%%%%%%%%%%%
DcCode = strcat(huffmanDcCoffients(DcCategoryEncoding+1),binaryTest);
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Extratcing Hoffman AC cofficients
% Row are runlength and coloums are Ac Huffman codes

huffmanAcCoffients = {
    '00'               '01'               '100'              '1011'             '11010'            '1111000'          '11111000'         '1111110110'       '1111111110000010' '1111111110000011';...
    '1100'             '11011'            '1111001'          '111110110'        '11111110110'      '1111111110000100' '1111111110000101' '1111111110000110' '1111111110000111' '11111111100001000';...
    '11100'            '11111001'         '1111110111'       '111111110100'     '1111111110001001' '1111111110001010' '1111111110001011' '1111111110001100' '1111111110001101' '1111111110001110';...
    '111010'           '111110111'        '111111110101'     '1111111110001111' '1111111110010000' '1111111110010001' '1111111110010010' '1111111110010011' '1111111110010100' '1111111110010101';...
    '111011'           '1111111000'       '1111111110010110' '1111111110010111' '1111111110011000' '1111111110011001' '1111111110011010' '1111111110011011' '1111111110011100' '1111111110011101';...
    '1111010'          '11111110111'      '1111111110011110' '1111111110011111' '1111111110100000' '1111111110100001' '1111111110100010' '1111111110100011' '1111111110100100' '1111111110100101';...
    '1111011'          '111111110110'     '1111111110100110' '1111111110100111' '1111111110101000' '1111111110101001' '1111111110101010' '1111111110101011' '1111111110101100' '1111111110101101';...
    '11111010'         '111111110111'     '1111111110101110' '1111111110101111' '1111111110110000' '1111111110110001' '1111111110110010' '1111111110110011' '1111111110110100' '1111111110110101';...
    '111111000'        '111111111000000'  '1111111110110110' '1111111110110111' '1111111110111000' '1111111110111001' '1111111110111010' '1111111110111011' '1111111110111100' '1111111110111101';...
    '111111001'        '1111111110111110' '1111111110111111' '1111111111000000' '1111111111000000' '1111111111000010' '1111111111000011' '1111111111000100' '1111111111000101' '1111111111000110';...
    '111111010'        '1111111111000111' '1111111111001000' '1111111111001001' '1111111111001010' '1111111111001011' '1111111111001100' '1111111111001101' '1111111111001110' '1111111111001111';...
    '1111111001'       '1111111111010000' '1111111111010001' '1111111111010010' '1111111111010011' '1111111111010100' '1111111111010101' '1111111111010110' '1111111111010111' '1111111111011000';...
    '1111111010'       '1111111111011001' '1111111111011010' '1111111111011011' '1111111111011100' '1111111111011101' '1111111111011110' '1111111111011111' '1111111111100000' '1111111111100001';...
    '11111111000'      '1111111111100010' '1111111111100011' '1111111111100100' '1111111111100101' '1111111111100110' '1111111111100111' '1111111111101000' '1111111111101001' '1111111111101010';...
    '1111111111101011' '1111111111101100' '1111111111101101' '1111111111101110' '1111111111101111' '1111111111110000' '1111111111110001' '1111111111110010' '1111111111110011' '1111111111110100';...
    '1111111111110101' '1111111111110110' '1111111111110111' '1111111111111000' '1111111111111001' '1111111111111010' '1111111111111011' '1111111111111100' '1111111111111101' '1111111111111110'
    };
% %runlengthSequence = [-3 2 1 0 -3];
% runlengthSequence = [-3 14 -14 2 1];
% %runlengthSequence = [-3 0 -3 0 1 0 -3 0 -2 0 -6 0 2 0 -4 0 1 0 -4 0 1 0 1 0 5 1 2 2 -1 0 -2 5 -1 0 -1];
AcCode = '';
for loop = 2:2:length(runlengthSequence)
    runLengthCode = runlengthSequence(loop);
    if(runLengthCode > 15)
        runLengthCode = 15;
    end
    runlengthSequence(loop+1);
    condition = 1;
    x = 1;
    AcCategoryEncoding = 1;
    while(condition == 1)
        if(-x <= runlengthSequence(loop+1) && runlengthSequence(loop+1) <= x)
            condition = 0;
        else
            x = 2*x+1;
            AcCategoryEncoding = AcCategoryEncoding + 1;
        end
    end
    
    %huffmanAcCoffients(runLengthCode+1,AcCategory)
    
    if(runlengthSequence(loop+1) >= 1)
        binaryTest = dec2bin(runlengthSequence(loop+1));
    end
    
    if(runlengthSequence(loop+1) <= -1)
        binaryTest = dec2bin(-runlengthSequence(loop+1));
        for i = 1 : 1 : length(binaryTest)
            if(str2num(binaryTest(i)) ==1)
                binaryTest(i) = '0';
            else
                binaryTest(i) = '1';
            end
        end
    end
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Ac HUffmanCode %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    AcCode = strcat(AcCode,huffmanAcCoffients(runLengthCode+1,AcCategoryEncoding),binaryTest);
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
end
    HuffmanEncode = strcat(DcCode,AcCode,'1010');
end